from datetime import datetime, timedelta
from aiogram import F, Router, Bot
from aiogram.types import Message
from re import Match
from data_store import DataStore

from filters import IsAdmin

karma_router = Router()

VOTE_COOLDOWN = 12 * 60 * 60  # 12 –≥–æ–¥–∏–Ω —É —Å–µ–∫—É–Ω–¥–∞—Ö


# ------------------ –°–ö–ò–î–ê–ù–ù–Ø –ö–ê–†–ú–ò ------------------
@karma_router.message(F.text.startswith("resetkarma"), IsAdmin())
async def reset_karma(message: Message, store: DataStore, bot: Bot):
    if not message.reply_to_message:
        await message.reply("‚ùó –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π –∫–æ–º–∞–Ω–¥—É —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–º—É –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å–∫–∏–Ω—É—Ç–∏ –∫–∞—Ä–º—É.")
        return

    target_user = message.reply_to_message.from_user

    try:
        store.set_karma(user_id=target_user.id, value=0)
        await message.reply(
            f"‚ôªÔ∏è –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä <b>{message.from_user.full_name}</b> —Å–∫–∏–Ω—É–≤ –∫–∞—Ä–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É <b>{target_user.full_name}</b> –¥–æ <b>0</b>."
        )
    except Exception as e:
        await message.reply(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∏–¥–∞–Ω–Ω—ñ –∫–∞—Ä–º–∏: {type(e).__name__}: {e}")


# ------------------ –ü–Ü–î–í–ò–©–ï–ù–ù–Ø –ö–ê–†–ú–ò ------------------
@karma_router.message(F.reply_to_message, F.text.regexp(r"^\+?\d+$").as_("digits"))
async def handle_karma_plus(message: Message, digits: Match[str], store: DataStore):
    voter_id = str(message.from_user.id)
    target_user = message.reply_to_message.from_user
    now = datetime.now().timestamp()

    store.data.setdefault("last_votes", {})
    last_vote_time = store.data["last_votes"].get(voter_id)
    if last_vote_time and now - last_vote_time < VOTE_COOLDOWN:
        remaining = int((VOTE_COOLDOWN - (now - last_vote_time)) / 3600)
        await message.reply(f"‚è≥ –¢–∏ –≤–∂–µ –≥–æ–ª–æ—Å—É–≤–∞–≤(–ª–∞)! –ú–æ–∂–Ω–∞ –±—É–¥–µ –∑–Ω–æ–≤—É —á–µ—Ä–µ–∑ {remaining} –≥–æ–¥–∏–Ω.")
        return

    value = int(digits.group(0).replace("+", ""))
    new_karma = store.add_karma(target_user.id, value)

    store.data["last_votes"][voter_id] = now
    store.save()

    await message.reply(
        f"üí´ <b>{message.from_user.full_name}</b> –ø—ñ–¥–≤–∏—â–∏–≤(–ª–∞) –∫–∞—Ä–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É <b>{target_user.full_name}</b> –Ω–∞ <code>{value}</code>.\n"
        f"‚öñÔ∏è –ü–æ—Ç–æ—á–Ω–∞ –∫–∞—Ä–º–∞: <b>{new_karma}</b>\n"
        f"(–ú–∞–∫—Å: 1000 | –ú—ñ–Ω: -1000)"
    )


# ------------------ –ó–ù–ò–ñ–ï–ù–ù–Ø –ö–ê–†–ú–ò ------------------
@karma_router.message(F.reply_to_message, F.text.regexp(r"^-\d+$").as_("digits"))
async def handle_karma_minus(message: Message, digits: Match[str], store: DataStore):
    voter_id = str(message.from_user.id)
    target_user = message.reply_to_message.from_user
    now = datetime.now().timestamp()

    store.data.setdefault("last_votes", {})
    last_vote_time = store.data["last_votes"].get(voter_id)
    if last_vote_time and now - last_vote_time < VOTE_COOLDOWN:
        remaining = int((VOTE_COOLDOWN - (now - last_vote_time)) / 3600)
        await message.reply(f"‚è≥ –¢–∏ –≤–∂–µ –≥–æ–ª–æ—Å—É–≤–∞–≤(–ª–∞)! –ú–æ–∂–Ω–∞ –±—É–¥–µ –∑–Ω–æ–≤—É —á–µ—Ä–µ–∑ {remaining} –≥–æ–¥–∏–Ω.")
        return

    value = int(digits.group(0))
    new_karma = store.add_karma(target_user.id, value)

    store.data["last_votes"][voter_id] = now
    store.save()

    await message.reply(
        f"üí¢ <b>{message.from_user.full_name}</b> –∑–Ω–∏–∑–∏–≤(–ª–∞) –∫–∞—Ä–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É <b>{target_user.full_name}</b> –Ω–∞ <code>{abs(value)}</code>.\n"
        f"‚öñÔ∏è –ü–æ—Ç–æ—á–Ω–∞ –∫–∞—Ä–º–∞: <b>{new_karma}</b>\n"
        f"(–ú–∞–∫—Å: 1000 | –ú—ñ–Ω: -1000)"
    )