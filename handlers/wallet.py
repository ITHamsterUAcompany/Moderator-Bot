import os
import json
import time
from datetime import datetime, timedelta
from aiogram import Router, F, Bot
from aiogram.types import Message

wallet_router = Router()

# üìÅ –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –∑ –±–∞–ª–∞–Ω—Å–∞–º–∏
WALLET_FILE = os.path.join(os.path.dirname(__file__), "wallets.json")
START_TOKENS = 100
COOLDOWN_SECONDS = 50400  # 14 –≥–æ–¥–∏–Ω

# üí∞ –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {user_id: {"balance": int, "last_claim": str, "last_topup": float}}
balances = {}

# üì¶ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ —Ñ–∞–π–ª—É
if os.path.exists(WALLET_FILE):
    try:
        with open(WALLET_FILE, "r", encoding="utf-8") as f:
            balances = json.load(f)
    except Exception:
        balances = {}
else:
    with open(WALLET_FILE, "w", encoding="utf-8") as f:
        json.dump({}, f, ensure_ascii=False, indent=2)

# üß© –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É —Ñ–∞–π–ª
def save_wallets():
    os.makedirs(os.path.dirname(WALLET_FILE), exist_ok=True)
    with open(WALLET_FILE, "w", encoding="utf-8") as f:
        json.dump(balances, f, ensure_ascii=False, indent=2)

# ü™ô –û—Ç—Ä–∏–º–∞—Ç–∏ –±–∞–ª–∞–Ω—Å
def get_balance(user_id: int) -> int:
    user_id = str(user_id)
    if user_id not in balances:
        balances[user_id] = {
            "balance": START_TOKENS,
            "last_claim": "1970-01-01 00:00:00",
            "last_topup": 0
        }
        save_wallets()
    return balances[user_id]["balance"]

# ‚ûñ –°–ø–∏—Å–∞—Ç–∏ –¢–ö
def deduct_balance(user_id: int, amount: int) -> bool:
    user_id = str(user_id)
    get_balance(user_id)
    if balances[user_id]["balance"] >= amount:
        balances[user_id]["balance"] -= amount
        save_wallets()
        return True
    return False

# ‚ûï –î–æ–¥–∞—Ç–∏ –¢–ö –±–µ–∑ –æ–±–º–µ–∂–µ–Ω—å
def add_balance(user_id: int, amount: int) -> None:
    user_id = str(user_id)
    get_balance(user_id)
    balances[user_id]["balance"] += amount
    save_wallets()

# ‚è∞ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ cooldown
def can_claim(user_id: int) -> bool:
    user_id = str(user_id)
    last = datetime.strptime(balances.get(user_id, {}).get("last_claim", "1970-01-01 00:00:00"), "%Y-%m-%d %H:%M:%S")
    return datetime.now() - last >= timedelta(seconds=COOLDOWN_SECONDS)

# üí∞ –í–∏–¥–∞—á–∞ –±–æ–Ω—É—Å—É
def claim_tokens(user_id: int, amount: int) -> bool:
    user_id = str(user_id)
    if not can_claim(user_id):
        return False
    get_balance(user_id)
    balances[user_id]["balance"] += amount
    balances[user_id]["last_claim"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    save_wallets()
    return True

# üëë –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–¥–º—ñ–Ω–∞
async def is_admin(bot: Bot, chat_id: int, user_id: int) -> bool:
    try:
        admins = await bot.get_chat_administrators(chat_id)
        return any(a.user.id == user_id for a in admins)
    except Exception:
        return False

# ü™ô –ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É
@wallet_router.message(F.text.regexp(r"^\+[—Çt][–∫k]\s*\d+", flags=0))
async def add_tokens(message: Message, bot: Bot):
    now = time.time()
    user_id = str(message.from_user.id)
    target_user = message.reply_to_message.from_user if message.reply_to_message else message.from_user
    target_id = str(target_user.id)

    try:
        amount = int(message.text.split()[1])
    except (IndexError, ValueError):
        await message.reply("‚ùå –§–æ—Ä–º–∞—Ç: <code>+—Ç–∫ 100</code>")
        return

    get_balance(target_id)
    get_balance(user_id)

    admin_status = await is_admin(bot, message.chat.id, message.from_user.id)

    if not admin_status:
        elapsed = now - balances[user_id]["last_topup"]
        if elapsed < COOLDOWN_SECONDS:
            h, m = int((COOLDOWN_SECONDS - elapsed) // 3600), int(((COOLDOWN_SECONDS - elapsed) % 3600) // 60)
            await message.reply(f"‚è≥ –¢–∏ –≤–∂–µ –ø–æ–ø–æ–≤–Ω—é–≤–∞–≤ –Ω–µ–¥–∞–≤–Ω–æ. –ü–æ–≤—Ç–æ—Ä–∏ —á–µ—Ä–µ–∑ {h} –≥–æ–¥ {m} —Ö–≤.")
            return

    balances[target_id]["balance"] += amount
    balances[user_id]["last_topup"] = now
    save_wallets()

    if target_id == user_id:
        msg = f"üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–≤–Ω–µ–Ω–æ –Ω–∞ <b>{amount}</b> –¢–ö!\nüîπ –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: <b>{balances[target_id]['balance']}</b>"
    else:
        msg = (
            f"üëë –ê–¥–º—ñ–Ω <b>{message.from_user.full_name}</b> –ø–æ–ø–æ–≤–Ω–∏–≤ –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É "
            f"<b>{target_user.full_name}</b> –Ω–∞ <b>{amount}</b> –¢–ö!\n"
            f"üíº –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: <b>{balances[target_id]['balance']}</b>"
        )

    await message.reply(msg, parse_mode="HTML")

# üíº –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—É
@wallet_router.message(F.text.lower().in_(["–±–∞–ª–∞–Ω—Å", "–≥–∞–º–∞–Ω–µ—Ü—å", "–∫–æ—à–µ–ª–µ–∫"]))
async def check_balance(message: Message):
    balance = get_balance(message.from_user.id)
    await message.reply(f"üíº –¢–≤—ñ–π –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: <b>{balance}</b> –¢–ö", parse_mode="HTML")