import asyncio
from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command, CommandObject
from aiogram.enums import ParseMode, ChatAction

from utils.gemini import client
from google.genai.errors import ServerError

# –≥–∞–º–∞–Ω–µ—Ü—å
from handlers.wallet import get_balance, deduct_balance, add_balance

ai_ask_router = Router()

COST_PER_PROMPT = 18  # üí∏ –≤–∞—Ä—Ç—ñ—Å—Ç—å GPT-–∑–∞–ø–∏—Ç—É


@ai_ask_router.message(Command(commands=["gpt"]))
async def ai_message_handler(message: Message, command: CommandObject) -> None:
    user_id = message.from_user.id
    balance = get_balance(user_id)

    # 1) –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—É
    if balance < COST_PER_PROMPT:
        await message.reply(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¢–ö. –ë–∞–ª–∞–Ω—Å: {balance}")
        return

    client_prompt = command.args
    if not client_prompt:
        await message.reply("‚ùå –í–∏ –Ω–µ –≤–∫–∞–∑–∞–ª–∏ –∑–∞–ø–∏—Ç –ø—ñ—Å–ª—è /gpt")
        return

    # 2) –°–ø–∏—Å–∞–Ω–Ω—è –¢–ö –ü–ï–†–ï–î –≤–∏–∫–ª–∏–∫–æ–º API
    if not deduct_balance(user_id, COST_PER_PROMPT):
        await message.reply("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å–ø–∏—Å–∞—Ç–∏ –¢–ö. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    # –ø–æ–∫–∞–∑—É—î–º–æ action typing
    await message.bot.send_chat_action(
        chat_id=message.chat.id,
        action=ChatAction.TYPING
    )

    sent_message = await message.reply("‚è≥")

    # 3) –í–∏–∫–ª–∏–∫ Gemini
    try:
        loop = asyncio.get_running_loop()
        response = await loop.run_in_executor(
            None,
            lambda: client.models.generate_content(
                model="gemini-2.5-flash",
                contents=client_prompt
            )
        )

    except ServerError:
        # –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –¢–ö —è–∫—â–æ Gemini –≤–ø–∞–ª–∞
        add_balance(user_id, COST_PER_PROMPT)
        await sent_message.delete()
        await message.reply("‚ùå Gemini –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞. –¢–ö –ø–æ–≤–µ—Ä–Ω–µ–Ω–æ.")
        return

    except Exception as e:
        # –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –¢–ö –ø—Ä–∏ —ñ–Ω—à–∏—Ö –ø–æ–º–∏–ª–∫–∞—Ö
        add_balance(user_id, COST_PER_PROMPT)
        await sent_message.delete()
        await message.reply(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}\n–¢–ö –ø–æ–≤–µ—Ä–Ω–µ–Ω–æ.")
        return

    # 4) –£—Å–ø—ñ—à–Ω–æ ‚Äî –ø—Ä–∏–±–∏—Ä–∞—î–º–æ ‚Äú‚è≥‚Äù, —à–ª–µ–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    await sent_message.delete()

    try:
        await message.reply(response.text, parse_mode=ParseMode.HTML)
    except:
        await message.reply(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å. –ó–Ω—è—Ç–æ {COST_PER_PROMPT} –¢–ö.")

    # 5) –§—ñ–Ω–∞–ª ‚Äî –ø–æ–∫–∞–∑—É—î–º–æ –Ω–æ–≤–∏–π –±–∞–ª–∞–Ω—Å
    new_balance = get_balance(user_id)
    await message.reply(f"üí∏ –ó–Ω—è—Ç–æ {COST_PER_PROMPT} –¢–ö. –ó–∞–ª–∏—à–æ–∫: {new_balance}")
